namespace AaDS.OOP_Patterns.Behavioral.Strategy;

/*
Стратегия — это поведенческий паттерн, выносит набор алгоритмов 
в собственные классы и делает их взаимозаменимыми.

Другие объекты содержат ссылку на объект-стратегию и делегируют ей работу. 
Программа может подменить этот объект другим, если требуется иной способ решения задачи. 
 
Применимость: Стратегия часто используется в C#-коде, особенно там, 
где нужно подменять алгоритм во время выполнения программы. 
Многие примеры стратегии можно заменить простыми lambda-выражениями.

Признаки применения паттерна: Класс делегирует выполнение вложенному объекту 
абстрактного типа или интерфейса.
*/

interface IStrategy
{
    int Execute(int a, int b);
}

class StrategyAdd : IStrategy
{
    public int Execute(int a, int b) => a + b;
}

class StrategySubtract : IStrategy
{
    public int Execute(int a, int b) => a - b;
}

class StrategyMultiply : IStrategy
{
    public int Execute(int a, int b) => a * b;
}

class Context : IStrategy
{
    public IStrategy Strategy { get; set; }

    public Context(IStrategy strategy) => Strategy = strategy;

    public int Execute(int a, int b) => Strategy.Execute(a, b);
}

class Demo
{
    public static void Test()
    {
        // 1. Создать объект контекста.
        // 2. Получить первое число (n1).
        // 3. Получить второе число (n2).
        // 4. Получить желаемую операцию.
        // 5. Затем, выбрать стратегию:
        Context context = new(new StrategyAdd());
        Console.WriteLine(context.Execute(5, 10));
        context.Strategy = new StrategyMultiply();
        Console.WriteLine(context.Execute(5, 10));
        context.Strategy = new StrategySubtract();
        Console.WriteLine(context.Execute(5, 10));
    }
}

/*
Мост, Стратегия и Состояние (а также слегка и Адаптер) имеют схожие структуры классов — 
все они построены на принципе «композиции», то есть делегирования работы другим объектам. 
Тем не менее, они отличаются тем, что решают разные проблемы. 
Помните, что паттерны — это не только рецепт построения кода определённым образом, 
но и описание проблем, которые привели к данному решению.

Команда и Стратегия похожи по духу, но отличаются масштабом и применением:

1. Команду используют, чтобы превратить любые разнородные действия в объекты. 
Параметры операции превращаются в поля объекта. Этот объект теперь можно логировать, 
хранить в истории для отмены, передавать во внешние сервисы и так далее.

2. С другой стороны, Стратегия описывает разные способы произвести одно и то же действие, 
позволяя взаимозаменять эти способы в каком-то объекте контекста.

Стратегия меняет поведение объекта «изнутри», а Декоратор изменяет его «снаружи».

Шаблонный метод использует наследование, чтобы расширять части алгоритма.
Стратегия использует делегирование, чтобы изменять выполняемые алгоритмы на лету. 
Шаблонный метод работает на уровне классов. Стратегия позволяет менять логику отдельных объектов.

Состояние можно рассматривать как надстройку над Стратегией. 
Оба паттерна используют композицию, чтобы менять поведение основного объекта, 
делегируя работу вложенным объектам-помощникам. Однако в Стратегии эти объекты не знают 
друг о друге и никак не связаны. В Состоянии сами конкретные состояния могут переключать контекст.
*/