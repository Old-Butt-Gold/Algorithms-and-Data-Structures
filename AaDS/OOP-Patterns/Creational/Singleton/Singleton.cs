namespace AaDS.OOP_Patterns.Creational.Singleton;

/*
Одиночка — это порождающий паттерн, который гарантирует существование только 
одного объекта определённого класса, 
а также позволяет достучаться до этого объекта из любого места программы.

Одиночка имеет такие же преимущества и недостатки, что и глобальные переменные. 
Его невероятно удобно использовать, но он нарушает модульность вашего кода.

Вы не сможете просто взять и использовать класс, зависящий от одиночки в другой программе. 
Для этого придётся эмулировать присутствие одиночки и там. 
Чаще всего эта проблема проявляется при написании юнит-тестов.

Применимость: Многие программисты считают Одиночку антипаттерном, поэтому его всё реже и реже можно встретить в C#-коде.

Признаки применения паттерна: Одиночку можно определить по статическому создающему методу, который возвращает один и тот же объект.
*/

public sealed class Database
{
    static volatile Database? _instance;
    static readonly object SyncRoot = new(); //Для многопоточности
    
    private Database()
    { 
        //подключение
    }

    public static Database GetInstance()
    {
        if (_instance is null)
        {
            lock (SyncRoot)
            {
                _instance ??= new Database();
            }
        }

        return _instance;
    }

    public string Query(string sql) => string.Empty;
}

/* 
Отношения с другими паттернами
Фасад можно сделать Одиночкой, так как обычно нужен только один объект-фасад.

Паттерн Легковес может напоминать Одиночку, если для конкретной задачи у вас получилось 
свести количество объектов к одному. Но помните, что между паттернами есть два кардинальных отличия:

1. В отличие от Одиночки, вы можете иметь множество объектов-легковесов.
2. Объекты-легковесы должны быть неизменяемыми, тогда как объект-одиночка допускает изменение своего состояния.

Абстрактная фабрика, Строитель и Прототип могут быть реализованы при помощи Одиночки.
*/